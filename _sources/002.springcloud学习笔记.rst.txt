002.springcloud复习笔记
####################################

还得是 `黑马 <https://www.bilibili.com/video/BV1S142197x7/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=3ae9dfcc16ba84113c717163327346c9>`_

0 概述 + 知识补习
==========================
微服务有很多问题：
什么是微服务，如何拆分
远程调用
服务治理
请求认证
配置管理
服务保护
分布式事务

将一个项目拆分成多个微服务，这样学起来才会真实的去解决问题

0.2 mybatisplus
---------------------
它并不是用来替代mybatis的，而是成为最佳合作伙伴，只是进行了增强。

1. 引入依赖
2. 自定义Mapper继承BaseMapper接口（注意这里要指定实体类的泛型）

.. warning::
    这里可以学习一下测试类的写法，之前写的不是很规范

常见注解：（现在都插件生成了，懂原理就行）
    默认是id为主键，变量、表明会自动转下划线
    可以使用@TableName @TableId @TableField 来指定各个玩意

    @TableId 
        主键有一个type的属性，支持auto,input,assign_id（雪花算法，生成Long）

        如果有类型自增长，需要指定auto

    @TableField必须场景
        - is开头的变量名映射到字段的时候会被去掉，所以一定要使用@TableField
        - 成员变量与数据库字段不同
        - 成员变量与数据库保留字冲突
        - 成员变量根本不是数据库字段
            - 添加@TableField(exist = false)

常见配置：

.. code-block::

    type-aliases-package 别名扫描包
    mapper-locations: mapper.xml文件地址
    configuration:
        map-underscore-camel-case: true 是否开启下划线和驼峰映射
        cache-enabled: false 是否开启二级缓存
    global-config:
        db-config:
            id-type: ossign_id
            update-strategy: not_null

条件构造器（Wraper）
    eq() ne() 等，可以实现较为复杂的curd

>>> 查询出名字中带o的，存款大于等于1k元的人的id, username, info, balance
>>> 
>>> new QueryWrapper<>()
                        .select("id", "username", "info", "balance")
                        .like("username", "o")
                        .ge("balance", 1000)
>>> userMapper.selectList(wrapper)


.. code-block::

    // 更新用户名为jack的用户的余额为2000
    User user = new User()
    user.setBalance(2000);

    new QueryWrapper<>().eq("username", "jack")

    userMapper.update(user,wrapper)


.. code-block::

    // 更加定制化的

    List<Long> idss = List.of(1,2,4L)

    new QueryWrapper<>().setSql("balance = balance-100")
                        .in("id", ids);

自定义SQL
    使用mp的wrapper构建where部分，剩下的我们自己写。
    像上边的扣款就是自定义，但是这样就涉及到一个问题，sql语句写进了service里边。

    .. code-block::

        userMapper.updateBalanceByIds(wrapper, amount);
        // 一定要写这个@Param("ew")
        void updateBalanceByIds(@Param("ew") LambdaQW<User> wrapper, @Param("amount") )

        <update id= >
            update tb_ set balance = balance-100 #{amount} ${ew.customSqlSegment}
        </update>


Service接口
    继承一时爽，一直继承一直爽
    
    传递mapper和实体类即可    



类的说明中可以添加 ``@Api(tgts = "xxx接口")``
并在方法上 ``@ApiOperation("xxx")``


由于直接 ``@Autowried`` 不是spring推荐的，这里可以使用构造函数注入的方式，但是这样会比较繁琐

所以可以在类前加 ``@ArgsConstructor`` 来实现，但是这样又会导致注入了不需要的
所以可以在类前加 ``@RequireArgsConstructor`` 来实现，当然，需要将 ``service`` 改为 ``final``

.. CODE-BLOCK::

    controller(){
        1. 将DTO拷贝到PO
        User user = BeanUtil.copyProperties(userDTO, User.class)
        2. 新建Service
    }


.. CODE-BLOCK::

    userService.listByIds(ids)
    return BeanUtil.copyToList(users, UserVO.class)


.. note::

    ``@ApiParam`` 可以指定名称
    ``@PathVariable("id")`` 可以直接在路径填










0.3 docker
---------------------





0.4 项目部署
---------------------



1 服务拆分+治理+远程调用
===========================
熟练使用微服务组件



2 请求路由+身份认证+配置管理
============================
微服务身份认证方案

3 服务保护+分布式事务
==============================
分布式事务

4 异步通信+消息可靠性+延迟消息
===================================
消息中间件可靠性

5 分布式搜索+倒排索引+数据聚合
====================================
分布式搜索引擎


6 微服务高级+理论补充
==========================

面试呀